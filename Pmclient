package com.nms.client.controller;

import com.nms.client.service.NbiService;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/nbi")
public class NbiController {

    private final NbiService nbiService;

    public NbiController(NbiService nbiService) {
        this.nbiService = nbiService;
    }

    @GetMapping("/mapped-data")
    public String getMappedPerformanceData() {
        return nbiService.fetchAndMapPerformanceData();
    }

    @GetMapping("/mapped-data-between")
    public String getMappedPerformanceDataBetween(
            @RequestParam String from, @RequestParam String to) {
        return nbiService.fetchPerformanceDataBetween(from, to);
    }
}


/////

package com.nms.client.model;

import java.util.List;

public class NbiPerformanceData {

    private String networkElementId;  // NE ID mapped from PerformanceData
    private String port;
    private String measurementUnit;
    private String timeStamp;
    private String trafficDirection;
    private String siteLocation;
    private String details;
    private List<NbiKpi> kpis;  // Mapped KPIs

    // Getters and Setters
    public String getNetworkElementId() {
        return networkElementId;
    }

    public void setNetworkElementId(String networkElementId) {
        this.networkElementId = networkElementId;
    }

    public String getPort() {
        return port;
    }

    public void setPort(String port) {
        this.port = port;
    }

    public String getMeasurementUnit() {
        return measurementUnit;
    }

    public void setMeasurementUnit(String measurementUnit) {
        this.measurementUnit = measurementUnit;
    }

    public String getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(String timeStamp) {
        this.timeStamp = timeStamp;
    }

    public String getTrafficDirection() {
        return trafficDirection;
    }

    public void setTrafficDirection(String trafficDirection) {
        this.trafficDirection = trafficDirection;
    }

    public String getSiteLocation() {
        return siteLocation;
    }

    public void setSiteLocation(String siteLocation) {
        this.siteLocation = siteLocation;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    public List<NbiKpi> getKpis() {
        return kpis;
    }

    public void setKpis(List<NbiKpi> kpis) {
        this.kpis = kpis;
    }

    // Inner class for KPI mapping
    public static class NbiKpi {
        private String metricName;
        private double metricValue;

        // Getters and Setters
        public String getMetricName() {
            return metricName;
        }

        public void setMetricName(String metricName) {
            this.metricName = metricName;
        }

        public double getMetricValue() {
            return metricValue;
        }

        public void setMetricValue(double metricValue) {
            this.metricValue = metricValue;
        }
    }
}



/////


package com.nms.client.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class NbiService {

    @Value("${performance.api.data}")
    private String performanceApiUrl;

    @Value("${performance.api.dataBetween}")
    private String performanceApiDataBetweenUrl;

    private final RestTemplate restTemplate = new RestTemplate();

    public String fetchAndMapPerformanceData() {
        return restTemplate.getForObject(performanceApiUrl, String.class);
    }

    public String fetchPerformanceDataBetween(String from, String to) {
        String url = performanceApiDataBetweenUrl + "?from=" + from + "&to=" + to;
        return restTemplate.getForObject(url, String.class);
    }
}


///

package com.nms.client.util;

import com.nms.client.model.NbiPerformanceData;
import com.nms.server.model.PerformanceData;

import java.util.List;
import java.util.stream.Collectors;

public class NbiMapper {

    public static NbiPerformanceData mapToNbi(PerformanceData data) {
        NbiPerformanceData nbiData = new NbiPerformanceData();
        nbiData.setNetworkElementId(data.getNeId());
        nbiData.setPort(data.getPortName());
        nbiData.setMeasurementUnit(data.getUnit());
        nbiData.setTimeStamp(data.getTimestamp());
        nbiData.setTrafficDirection(data.getDirection());
        nbiData.setSiteLocation(data.getLocation());
        nbiData.setDetails(data.getDescription());

        // Map KPI list
        List<NbiPerformanceData.NbiKpi> nbiKpis = data.getKpis().stream().map(kpi -> {
            NbiPerformanceData.NbiKpi nbiKpi = new NbiPerformanceData.NbiKpi();
            nbiKpi.setMetricName(kpi.getMonName());
            nbiKpi.setMetricValue(kpi.getValue());
            return nbiKpi;
        }).collect(Collectors.toList());

        nbiData.setKpis(nbiKpis);
        return nbiData;
    }
}


////


package com.nms.client.util;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;

public class JsonToPropertiesConverter {

    public static void convertJsonToProperties(String json, String outputFilePath) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, String> apiEndpoints = objectMapper.readValue(json, Map.class);

            FileWriter writer = new FileWriter(outputFilePath);
            for (Map.Entry<String, String> entry : apiEndpoints.entrySet()) {
                writer.write(entry.getKey() + "=" + entry.getValue() + "\n");
            }
            writer.close();
            System.out.println("Properties file generated: " + outputFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Sample JSON (this should be fetched from /performance/api-spec in a real scenario)
        String apiSpecJson = "{ \"performance.api.data\": \"http://localhost:8080/performance/data\", \"performance.api.spec\": \"http://localhost:8080/performance/api-spec\" }";

        // Convert JSON to properties file
        convertJsonToProperties(apiSpecJson, "src/main/resources/api_endpoints.properties");
    }
}



/////
performance.api.data=http://localhost:8080/performance/data
performance.api.dataBetween=http://localhost:8080/performance/data-between
performance.api.spec=http://localhost:8080/performance/api-spec




package com.nms.client.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class NbiService {

    @Value("${performance.api.data}")
    private String performanceApiUrl;

    @Value("${performance.api.dataBetween}")
    private String performanceApiDataBetweenUrl;

    private final RestTemplate restTemplate;

    public NbiService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate; // Inject RestTemplate from Spring
    }

    public String fetchAndMapPerformanceData() {
        String response = restTemplate.getForObject(performanceApiUrl, String.class);
        return mapToNbiFormat(response);
    }

    public String fetchPerformanceDataBetween(String from, String to) {
        String url = performanceApiDataBetweenUrl + "?from=" + from + "&to=" + to;
        String response = restTemplate.getForObject(url, String.class);
        return mapToNbiFormat(response);
    }

    private String mapToNbiFormat(String serverData) {
        // Implement mapping logic to transform Server JSON to NBI JSON
        return serverData; // Replace with actual mapping
    }
}


//))//////



package com.nms.client.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}


////


package com.nms.client.controller;

import com.nms.client.service.NbiService;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/nbi")
public class NbiController {

    private final NbiService nbiService;

    public NbiController(NbiService nbiService) {
        this.nbiService = nbiService;
    }

    // ✅ Fetch all mapped performance data
    @GetMapping("/mapped-data")
    public String getMappedPerformanceData() {
        System.out.println("Inside /mapped-data endpoint");
        String result = nbiService.fetchAndMapPerformanceData();
        
        if (result == null) {
            System.out.println("No mapped data found!");
            return "No Data Available";
        }
        
        return result;
    }

    // ✅ Fetch mapped performance data within a time range
    @GetMapping("/mapped-data-between")
    public String getMappedPerformanceDataBetween(
        @RequestParam String from, 
        @RequestParam String to) {
        
        System.out.println("Fetching mapped performance data from " + from + " to " + to);
        
        String result = nbiService.fetchPerformanceDataBetween(from, to);
        
        if (result == null) {
            System.out.println("No data found for the given range!");
            return "No Data Available";
        }
        
        return result;
    }
}


///
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.util.List;

@Service
public class NbiService {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    public NbiService(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public ResponseEntity<List<PerformanceData>> fetchAndMapPerformanceData() {
        String response = restTemplate.getForObject(performanceApiUrl, String.class);
        
        try {
            List<PerformanceData> dataList = objectMapper.readValue(response, new TypeReference<>() {});
            return ResponseEntity.ok(dataList);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    public ResponseEntity<List<PerformanceData>> fetchPerformanceDataBetween(String from, String to) {
        String url = performanceApiDataBetweenUrl + "?from=" + from + "&to=" + to;
        String response = restTemplate.getForObject(url, String.class);
        
        try {
            List<PerformanceData> dataList = objectMapper.readValue(response, new TypeReference<>() {});
            return ResponseEntity.ok(dataList);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
}

/////
public List<PerformanceData> getPerformanceDataByTimestampAndPort(String from, String to, String portName) {
    List<PerformanceData> allData = getAllPerformanceData();

    return allData.stream()
        .filter(data -> {
            boolean timestampMatch = data.getTimestamp().compareTo(from) >= 0 &&
                                     data.getTimestamp().compareTo(to) <= 0;

            boolean portMatch = (portName == null || portName.isEmpty()) ||
                                data.getPortName().equalsIgnoreCase(portName);

            return timestampMatch && portMatch;
        })
        .collect(Collectors.toList());
}


///

List<Kpi> filteredKpis = data.getKpis().stream()
                .filter(kpi -> montype == null || montype.isEmpty() || kpi.getMonName().toLowerCase().contains(montype.toLowerCase()))
                .collect(Collectors.toList());

            // Only return if at least one KPI matched
            if (!filteredKpis.isEmpty()) {
                data.setKpis(filteredKpis);
                return data;
            } else {
                return null;
            }
        })
        .filter(Objects::nonNull)
        .collect(Collectors.toList());

////

List<Kpi> filteredKpis = data.getKpis().stream()
                .filter(kpi -> montype == null || montype.isEmpty() || kpi.getMonName().equalsIgnoreCase(montype))
                .collect(Collectors.toList());
            filteredData.setKpis(filteredKpis);

            return filteredData;
        })
        .collect(Collectors.toList());
}


///


.map(data -> {
            // If montype is given, filter KPI list to include only matching KPI
            if (montype != null && !montype.isEmpty()) {
                List<Kpi> filteredKpis = data.getKpis().stream()
                        .filter(kpi -> kpi.getMonName().equalsIgnoreCase(montype))
                        .collect(Collectors.toList());
                data.setKpis(filteredKpis);
            }
            return data;
        })



///
if (from == null || to == null || portname == null || neId == null ||
        from.isEmpty() || to.isEmpty() || portname.isEmpty() || neId.isEmpty()) {
        return Collections.emptyList(); // or throw IllegalArgumentException
    }


////

import java.util.List;

public class TapiPerformanceData {
    private String nodeUuid;
    private String nodeEdgePointUuid;
    private String timeStamp;
    private MeasurementUnit measurementUnit;
    private TrafficDirection trafficDirection;
    private SiteLocation siteLocation;
    private DataDescription dataDescription;
    private List<PerformanceValue> performanceValueList;

    // Getters and Setters
    public String getNodeUuid() {
        return nodeUuid;
    }

    public void setNodeUuid(String nodeUuid) {
        this.nodeUuid = nodeUuid;
    }

    public String getNodeEdgePointUuid() {
        return nodeEdgePointUuid;
    }

    public void setNodeEdgePointUuid(String nodeEdgePointUuid) {
        this.nodeEdgePointUuid = nodeEdgePointUuid;
    }

    public String getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(String timeStamp) {
        this.timeStamp = timeStamp;
    }

    public MeasurementUnit getMeasurementUnit() {
        return measurementUnit;
    }

    public void setMeasurementUnit(MeasurementUnit measurementUnit) {
        this.measurementUnit = measurementUnit;
    }

    public TrafficDirection getTrafficDirection() {
        return trafficDirection;
    }

    public void setTrafficDirection(TrafficDirection trafficDirection) {
        this.trafficDirection = trafficDirection;
    }

    public SiteLocation getSiteLocation() {
        return siteLocation;
    }

    public void setSiteLocation(SiteLocation siteLocation) {
        this.siteLocation = siteLocation;
    }

    public DataDescription getDataDescription() {
        return dataDescription;
    }

    public void setDataDescription(DataDescription dataDescription) {
        this.dataDescription = dataDescription;
    }

    public List<PerformanceValue> getPerformanceValueList() {
        return performanceValueList;
    }

//

Tapi performance response:

import java.util.List;

public class TapiPerformanceResponse {
    private List<TapiPerformanceData> performanceDataList;

    public TapiPerformanceResponse(List<TapiPerformanceData> performanceDataList) {
        this.performanceDataList = performanceDataList;
    }

    public List<TapiPerformanceData> getPerformanceDataList() {
        return performanceDataList;
    }

    public void setPerformanceDataList(List<TapiPerformanceData> performanceDataList) {
        this.performanceDataList = performanceDataList;
    }
}



////
TapiMapper:

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class TapiMapper {

    public static TapiPerformanceData map(NbiPerformanceData nbiData) {
        TapiPerformanceData tapi = new TapiPerformanceData();

        tapi.setNodeUuid(nbiData.getNeId());
        tapi.setNodeEdgePointUuid(nbiData.getPortName()); // or getResourceName()

        tapi.setTimeStamp(nbiData.getTimeStamp());

        TapiPerformanceData.MeasurementUnit mu = new TapiPerformanceData.MeasurementUnit();
        mu.setUnit(nbiData.getUnit());
        tapi.setMeasurementUnit(mu);

        TapiPerformanceData.TrafficDirection td = new TapiPerformanceData.TrafficDirection();
        td.setDirection(nbiData.getDirection());
        tapi.setTrafficDirection(td);

        TapiPerformanceData.SiteLocation sl = new TapiPerformanceData.SiteLocation();
        sl.setLocation(nbiData.getLocation());
        tapi.setSiteLocation(sl);

        TapiPerformanceData.DataDescription dd = new TapiPerformanceData.DataDescription();
        dd.setDescription(nbiData.getDescription());
        tapi.setDataDescription(dd);

        List<TapiPerformanceData.PerformanceValue> perfList = new ArrayList<>();
        for (Kpi kpi : nbiData.getKpis()) {
            TapiPerformanceData.PerformanceValue pv = new TapiPerformanceData.PerformanceValue();
            pv.setMetricName(kpi.getMonName());
            pv.setMetricValue(kpi.getValue());
            perfList.add(pv);
        }

        tapi.setPerformanceValueList(perfList);
        return tapi;
    }

    public static List<TapiPerformanceData> mapAll(List<NbiPerformanceData> nbiList) {
        return nbiList.stream().map(TapiMapper::map).collect(Collectors.toList());
    }
}


Tapi controller:


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/tapi/performance")
public class PerformanceController {

    @Autowired
    private NbiService nbiService;

    @GetMapping("/getAllPerformanceData")
    public TapiPerformanceResponse getAllPerformanceData() {
        List<NbiPerformanceData> rawData = nbiService.getAllPerformanceData();
        List<TapiPerformanceData> mapped = TapiMapper.mapAll(rawData);
        return new TapiPerformanceResponse(mapped);
    }
}